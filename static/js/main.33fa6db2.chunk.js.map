{"version":3,"sources":["MS/Cell/Cell.js","MS/GridRow/GridRow.js","MS/Grid/Grid.js","MS/Header/Header.js","Minesweeper.js","index.js"],"names":["Cell","props","data","isPressed","hasMine","className","onClick","tryPress","onContextMenu","e","preventDefault","minesAround","flag","hasFlag","GridRow","cells","map","index","key","Grid","createGrid","grid","i","rows","push","j","columns","x","y","mines","row","Math","floor","random","col","chosencell","cell","game","Promise","resolve","countNeighbours","then","state","currentCell","openedCells","newRows","setState","onCellInspect","findEmptyCell","finishGame","total","rowOff","colOff","length","changeFlagsNumber","nextProps","this","Component","Header","minutes","time","seconds","timeToSend","flags","reset","App","tick","setInterval","fn","t","intervals","clearInterval","savedState","handleCellInspect","previousState","amount","winning","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAmEeA,G,MAjEF,SAACC,GA8DZ,OA5DMA,EAAMC,KAAKC,UACTF,EAAMC,KAAKE,QAEX,yBACEC,UAAU,YACVC,QAAS,kBAAML,EAAMM,SAASN,EAAMC,OACpCM,cAAe,SAACC,GACdA,EAAEC,oBAI4B,IAA3BT,EAAMC,KAAKS,YAElB,yBACEN,UAAU,eACVC,QAAS,kBAAML,EAAMM,SAASN,EAAMC,OACpCM,cAAe,SAACC,GACdA,EAAEC,iBACFT,EAAMW,KAAKX,EAAMC,SAMrB,yBACEG,UAAU,eACVC,QAAS,kBAAML,EAAMM,SAASN,EAAMC,OACpCM,cAAe,SAACC,GACdA,EAAEC,iBACFT,EAAMW,KAAKX,EAAMC,QAGlBD,EAAMC,KAAKS,aAITV,EAAMC,KAAKW,QAElB,yBACER,UAAU,eACVC,QAAS,kBAAML,EAAMM,SAASN,EAAMC,OACpCM,cAAe,SAACC,GACdA,EAAEC,iBACFT,EAAMW,KAAKX,EAAMC,SAMrB,yBACEG,UAAU,OACVC,QAAS,kBAAML,EAAMM,SAASN,EAAMC,OACpCM,cAAe,SAACC,GACdA,EAAEC,iBACFT,EAAMW,KAAKX,EAAMC,WC/CdY,EARC,SAACb,GACf,IAAIc,EAAQd,EAAMc,MAAMC,KAAI,SAACd,EAAMe,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOf,KAAMA,EAAMK,SAAUN,EAAMM,SAAUK,KAAMX,EAAMW,UAG7E,OAAO,yBAAKP,UAAU,OAAOU,ICqKhBI,E,kDAzKb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAcRmB,WAAa,SAACnB,GAGZ,IAFA,IAAIoB,EAAO,GAEFC,EAAI,EAAGA,EAAIrB,EAAMsB,KAAMD,IAAK,CACnCD,EAAKG,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAMyB,QAASD,IACjCJ,EAAKC,GAAGE,KAAK,CACXG,EAAGF,EACHG,EAAGN,EAEHX,YAAa,EACbP,SAAS,EACTD,WAAW,EACXU,SAAS,IAKf,IAAK,IAAIS,EAAI,EAAGA,EAAIrB,EAAM4B,MAAOP,IAAK,CACpC,IAAIQ,EAAMC,KAAKC,MAAMD,KAAKE,SAAWhC,EAAMsB,MACvCW,EAAMH,KAAKC,MAAMD,KAAKE,SAAWhC,EAAMyB,SAEvCS,EAAad,EAAKS,GAAKI,GAEvBC,EAAW/B,QACbkB,IAEAa,EAAW/B,SAAU,EAGzB,OAAOiB,GA7CU,EAgDnBd,SAAW,SAAC6B,GACc,UAApB,EAAKnC,MAAMoC,MAAwC,QAApB,EAAKpC,MAAMoC,MAI7B,IAAIC,SAAQ,SAACC,GAG5BA,EAFY,EAAKC,gBAAgBJ,OAKxBK,MAAK,SAACD,GACf,IAAIjB,EAAO,EAAKmB,MAAMnB,KAClBoB,EAAcpB,EAAKa,EAAKR,GAAGQ,EAAKT,GAEpC,GAAIgB,EAAYvC,SAAsC,IAA3B,EAAKH,MAAM2C,YAAmB,CACvD,IAAIC,EAAU,EAAKzB,WAAW,EAAKnB,OACnC,EAAK6C,SACH,CACEvB,KAAMsB,IAER,WACE,EAAKtC,SAAS6B,WAIbO,EAAYxC,WAAciC,EAAKvB,UAClC,EAAKZ,MAAM8C,gBACXJ,EAAYxC,WAAY,EACxBwC,EAAYhC,YAAc6B,EAE1B,EAAKM,SAAS,CAAEvB,SAEXoB,EAAYvC,SAA+B,IAApBoC,GAC1B,EAAKQ,cAAcZ,GAGjBO,EAAYvC,SAAsC,IAA3B,EAAKH,MAAM2C,aACpC,EAAK3C,MAAMgD,kBAtFF,EA6FnBT,gBAAkB,SAACJ,GAGjB,IADA,IAAIc,EAAQ,EACHpB,GAAO,EAAGA,GAAO,EAAGA,IAC3B,IAAK,IAAII,GAAO,EAAGA,GAAO,EAAGA,IAC3B,GAAIE,EAAKR,EAAIE,GAAO,GAAKM,EAAKT,EAAIO,GAAO,EAAG,CAC1C,IAAIiB,EAASrB,EAAMM,EAAKR,EACpBwB,EAASlB,EAAME,EAAKT,EAEtBwB,EAAS,EAAKT,MAAMnB,KAAK8B,QACzBD,EAAS,EAAKV,MAAMnB,KAAK,GAAG8B,UAG1B,EAAKX,MAAMnB,KAAK4B,GAAQC,GAAQhD,SACtB,IAAR0B,GAAqB,IAARI,GAEfgB,KAMV,OAAOA,GAnHU,EAsHnBF,cAAgB,SAACZ,GAGf,IADA,IAAIb,EAAO,EAAKmB,MAAMnB,KACbO,GAAO,EAAGA,GAAO,EAAGA,IAC3B,IAAK,IAAII,GAAO,EAAGA,GAAO,EAAGA,IAC3B,GAAIE,EAAKR,EAAIE,GAAO,GAAKM,EAAKT,EAAIO,GAAO,EAAG,CAC1C,IAAIiB,EAASrB,EAAMM,EAAKR,EACpBwB,EAASlB,EAAME,EAAKT,EAEtBwB,EAAS,EAAKT,MAAMnB,KAAK8B,QACzBD,EAAS,EAAKV,MAAMnB,KAAK,GAAG8B,SAGzB9B,EAAK4B,GAAQC,GAAQhD,SACrBmB,EAAK4B,GAAQC,GAAQjD,WAEtB,EAAKI,SAASgB,EAAK4B,GAAQC,OAtIpB,EA8InBxC,KAAO,SAACwB,GACN,IAAIb,EAAO,EAAKmB,MAAMnB,KACE,UAApB,EAAKtB,MAAMoC,MAAwC,QAApB,EAAKpC,MAAMoC,OAElCD,EAAKjC,YACfiC,EAAKvB,SAAWuB,EAAKvB,QACrB,EAAKiC,SAAS,CAAEvB,SAChB,EAAKtB,MAAMqD,kBAAkBlB,EAAKvB,SAAW,EAAI,MAnJnD,EAAK6B,MAAQ,CACXnB,KAAM,EAAKH,WAAWnB,IAHP,E,sEAOOsD,GACpBC,KAAKvD,MAAM2C,YAAcW,EAAUX,aACrCY,KAAKV,SAAS,CACZvB,KAAMiC,KAAKpC,WAAWmC,O,+BA+IlB,IAAD,OAEHhC,EAAOiC,KAAKd,MAAMnB,KAAKP,KAAI,SAACc,EAAKb,GACnC,OACE,kBAAC,EAAD,CACEF,MAAOe,EACPZ,IAAKD,EACLV,SAAU,EAAKA,SACfK,KAAM,EAAKA,UAIjB,OAAO,yBAAKP,UAAU,QAAQkB,O,GAtKfkC,aCeJC,EAhBA,SAACzD,GACd,IAAI0D,EAAU5B,KAAKC,MAAM/B,EAAM2D,KAAO,IAClCC,EAAU5D,EAAM2D,KAAiB,GAAVD,GAAgB,EACvCG,EAAaH,EAAU,KAAOE,EAAU,GAAK,IAAM,IAAMA,EAE7D,OACE,yBAAKxD,UAAU,eACb,yBAAKA,UAAU,SAASJ,EAAM8D,OAC9B,4BAAQ1D,UAAU,QAAQC,QAASL,EAAM+D,OAAzC,SAGA,yBAAK3D,UAAU,SAASyD,KCiGfG,E,kDAxGb,aAAe,IAAD,8BACZ,gBAkBFC,KAAO,WACL,GAAI,EAAKxB,MAAME,YAAc,GAAyB,YAApB,EAAKF,MAAML,KAAoB,CAC/D,IAAIuB,EAAO,EAAKlB,MAAMkB,KAAO,EAC7B,EAAKd,SAAS,CAAEc,WAtBN,EA0BdO,YAAc,SAACC,EAAIC,GACjB,EAAKC,UAAU9C,KAAK2C,YAAYC,EAAIC,KA3BxB,EAoCdL,MAAQ,WACN,EAAKM,UAAUtD,IAAIuD,eACnB,EAAKzB,SAAL,eAAmB,EAAK0B,aAAc,WACpC,EAAKF,UAAY,OAvCP,EA2CdrB,WAAa,WACX,EAAKH,SAAS,CACZT,KAAM,WA7CI,EAiDdoC,kBAAoB,WACM,YAApB,EAAK/B,MAAML,MAAiD,IAA3B,EAAKK,MAAME,aAC9C,EAAKE,SACH,CACET,KAAM,YAER,WACE,EAAK8B,YAAY,EAAKD,KAAM,QAKlC,EAAKpB,UAAS,SAAC4B,GACb,MAAO,CAAE9B,YAAa8B,EAAc9B,YAAc,OA9DxC,EAkEdU,kBAAoB,SAACqB,GACnB,EAAK7B,SAAS,CAAEiB,MAAO,EAAKrB,MAAMqB,MAAQY,KAnE9B,EAsEdC,QAAU,WAEN,EAAKlC,MAAMb,MAAQ,EAAKa,MAAME,aAC9B,EAAKF,MAAMhB,QAAU,EAAKgB,MAAMnB,MAEhC,EAAKuB,SAAS,CACZT,KAAM,SA1EV,EAAKK,MAAQ,CACXE,YAAa,EACbgB,KAAM,EACNrC,KAAM,GACNG,QAAS,GACTG,MAAO,GACPkC,MAAO,GACP1B,KAAM,WAGR,EAAKmC,WAAa,EAAK9B,MAZX,E,iEAgBZc,KAAKc,UAAY,K,2CAeO,YAApBd,KAAKd,MAAML,MACbmB,KAAKoB,Y,+BAkDP,OACE,yBAAKvE,UAAU,eACb,kBAAC,EAAD,CACEuD,KAAMJ,KAAKd,MAAMkB,KACjBG,MAAOP,KAAKd,MAAMqB,MAClBC,MAAOR,KAAKQ,QAEd,kBAAC,EAAD,CACE3B,KAAMmB,KAAKd,MAAML,KACjBO,YAAaY,KAAKd,MAAME,YACxBrB,KAAMiC,KAAKd,MAAMnB,KACjBG,QAAS8B,KAAKd,MAAMhB,QACpBG,MAAO2B,KAAKd,MAAMb,MAClByB,kBAAmBE,KAAKF,kBACxBP,cAAeS,KAAKiB,kBACpBxB,WAAYO,KAAKP,kB,GAlGTQ,aCDlBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.33fa6db2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  let cell = () => {\r\n    if (props.data.isPressed) {\r\n      if (props.data.hasMine) {\r\n        return (\r\n          <div\r\n            className=\"bomb cell\"\r\n            onClick={() => props.tryPress(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          ></div>\r\n        );\r\n      } else if (props.data.minesAround === 0) {\r\n        return (\r\n          <div\r\n            className=\"pressed cell\"\r\n            onClick={() => props.tryPress(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"pressed cell\"\r\n            onClick={() => props.tryPress(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n          >\r\n            {props.data.minesAround}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n      return (\r\n        <div\r\n          className=\"flagged cell\"\r\n          onClick={() => props.tryPress(props.data)}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n        ></div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onClick={() => props.tryPress(props.data)}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\"\r\n\r\nconst GridRow = (props) => {\r\n  let cells = props.cells.map((data, index) => {\r\n    return <Cell key={index} data={data} tryPress={props.tryPress} flag={props.flag}/>;\r\n  });\r\n\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default GridRow;\r\n","import React, { Component } from \"react\";\r\nimport GridRow from \"../GridRow/GridRow\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: this.createGrid(props),\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.openedCells > nextProps.openedCells) {\r\n      this.setState({\r\n        rows: this.createGrid(nextProps),\r\n      });\r\n    }\r\n  }\r\n\r\n  createGrid = (props) => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n\r\n          minesAround: 0,\r\n          hasMine: false,\r\n          isPressed: false,\r\n          hasFlag: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < props.mines; i++) {\r\n      let row = Math.floor(Math.random() * props.rows);\r\n      let col = Math.floor(Math.random() * props.columns);\r\n\r\n      let chosencell = grid[row][col];\r\n\r\n      if (chosencell.hasMine) {\r\n        i--;\r\n      } else {\r\n        chosencell.hasMine = true;\r\n      }\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  tryPress = (cell) => {\r\n    if (this.props.game === \"ended\" || this.props.game === \"won\") {\r\n      return;\r\n    }\r\n\r\n    let neighbours = new Promise((resolve) => {\r\n      let bombs = this.countNeighbours(cell);\r\n\r\n      resolve(bombs);\r\n    });\r\n\r\n    neighbours.then((countNeighbours) => {\r\n      let rows = this.state.rows;\r\n      let currentCell = rows[cell.y][cell.x];\r\n\r\n      if (currentCell.hasMine && this.props.openedCells === 0) {\r\n        let newRows = this.createGrid(this.props);\r\n        this.setState(\r\n          {\r\n            rows: newRows,\r\n          },\r\n          () => {\r\n            this.tryPress(cell);\r\n          }\r\n        );\r\n      } else {\r\n        if (!currentCell.isPressed && !cell.hasFlag) {\r\n          this.props.onCellInspect();\r\n          currentCell.isPressed = true;\r\n          currentCell.minesAround = countNeighbours;\r\n\r\n          this.setState({ rows });\r\n\r\n          if (!currentCell.hasMine && countNeighbours === 0) {\r\n            this.findEmptyCell(cell);\r\n          }\r\n\r\n          if (currentCell.hasMine && this.props.openedCells !== 0) {\r\n            this.props.finishGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  countNeighbours = (cell) => {\r\n    //Method based on the reference code, that was created in java\r\n    let total = 0;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          let rowOff = row + cell.y;\r\n          let colOff = col + cell.x;\r\n          if (\r\n            rowOff < this.state.rows.length &&\r\n            colOff < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              this.state.rows[rowOff][colOff].hasMine &&\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              total++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return total;\r\n  };\r\n\r\n  findEmptyCell = (cell) => {\r\n    //Spin through the neighbouring cells just as in the before method\r\n    let rows = this.state.rows;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          let rowOff = row + cell.y;\r\n          let colOff = col + cell.x;\r\n          if (\r\n            rowOff < this.state.rows.length &&\r\n            colOff < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              !rows[rowOff][colOff].hasMine &&\r\n              !rows[rowOff][colOff].isPressed\r\n            ) {\r\n              this.tryPress(rows[rowOff][colOff]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  flag = (cell) => {\r\n    let rows = this.state.rows;\r\n    if (this.props.game === \"ended\" || this.props.game === \"won\") {\r\n      return;\r\n    } else if (!cell.isPressed) {\r\n      cell.hasFlag = !cell.hasFlag;\r\n      this.setState({ rows });\r\n      this.props.changeFlagsNumber(cell.hasFlag ? -1 : 1);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Create rows\r\n    let rows = this.state.rows.map((row, index) => {\r\n      return (\r\n        <GridRow\r\n          cells={row}\r\n          key={index}\r\n          tryPress={this.tryPress}\r\n          flag={this.flag}\r\n        />\r\n      );\r\n    });\r\n    return <div className=\"grid\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  let minutes = Math.floor(props.time / 60);\r\n  let seconds = props.time - minutes * 60 || 0;\r\n  let timeToSend = minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n\r\n  return (\r\n    <div className=\"grid-header\">\r\n      <div className=\"flags\">{props.flags}</div>\r\n      <button className=\"reset\" onClick={props.reset}>\r\n        RESET\r\n      </button>\r\n      <div className=\"timer\">{timeToSend}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"./MS/Grid/Grid\";\r\nimport Header from \"./MS/Header/Header\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      openedCells: 0,\r\n      time: 0,\r\n      rows: 10,\r\n      columns: 10,\r\n      mines: 15,\r\n      flags: 15,\r\n      game: \"pending\", //Can be pending, running, ended and won\r\n    };\r\n\r\n    this.savedState = this.state;\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.intervals = [];\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.openedCells > 0 && this.state.game === \"running\") {\r\n      let time = this.state.time + 1;\r\n      this.setState({ time });\r\n    }\r\n  };\r\n\r\n  setInterval = (fn, t) => {\r\n    this.intervals.push(setInterval(fn, t));\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.game === \"running\") {\r\n      this.winning();\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.intervals.map(clearInterval);\r\n    this.setState({ ...this.savedState }, () => {\r\n      this.intervals = [];\r\n    });\r\n  };\r\n\r\n  finishGame = () => {\r\n    this.setState({\r\n      game: \"ended\",\r\n    });\r\n  };\r\n\r\n  handleCellInspect = () => {\r\n    if (this.state.game !== \"running\" && this.state.openedCells === 0) {\r\n      this.setState(\r\n        {\r\n          game: \"running\",\r\n        },\r\n        () => {\r\n          this.setInterval(this.tick, 1000);\r\n        }\r\n      );\r\n    }\r\n\r\n    this.setState((previousState) => {\r\n      return { openedCells: previousState.openedCells + 1 };\r\n    });\r\n  };\r\n\r\n  changeFlagsNumber = (amount) => {\r\n    this.setState({ flags: this.state.flags + amount });\r\n  };\r\n\r\n  winning = () => {\r\n    if (\r\n      this.state.mines + this.state.openedCells >=\r\n      this.state.columns * this.state.rows\r\n    ) {\r\n      this.setState({\r\n        game: \"won\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"minesweeper\">\r\n        <Header\r\n          time={this.state.time}\r\n          flags={this.state.flags}\r\n          reset={this.reset}\r\n        />\r\n        <Grid\r\n          game={this.state.game}\r\n          openedCells={this.state.openedCells}\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          mines={this.state.mines}\r\n          changeFlagsNumber={this.changeFlagsNumber}\r\n          onCellInspect={this.handleCellInspect}\r\n          finishGame={this.finishGame}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Minesweeper\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}