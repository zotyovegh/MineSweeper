{"version":3,"sources":["Game/Cell/index.js","Game/GridRow/index.js","Game/Grid/index.js","Game/Header/index.js","Game/index.js","Dialog/index.js","Minesweeper.js","index.js"],"names":["Cell","props","data","isPressed","hasMine","className","onClick","click","onContextMenu","e","preventDefault","minesAround","flag","hasFlag","GridRow","cells","map","index","key","Grid","createGrid","grid","i","rows","push","j","columns","x","y","mines","row","Math","floor","random","col","chosencell","cell","game","Promise","resolve","countNeighbours","then","state","currentCell","openedCells","newRows","setState","onCellInspect","countEmptyCell","finishGame","total","rowOff","colOff","length","changeFlagsNumber","isNew","nextProps","this","Component","Header","minutes","time","seconds","timeToSend","flags","reset","Game","tick","setInterval","fn","t","intervals","newState","clearInterval","handleCellInspect","previousState","amount","winning","Dialog","checkCategory","checkNumber","num","min","max","validateMine","mine","round","newGame","radio","onNewGame","crow","customrows","ccol","customcolumns","cmine","custommines","cmineValid","onChange","bind","onCustomRowChange","onCustomColumnChange","onCustomMinesChange","target","name","value","dialog","id","colSpan","onClose","type","checked","isOpen","Minesweeper","changeDialog","recrows","reccolumns","recmines","current","createRef","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a5409d0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  let cell = () => {\r\n    if (props.data.isPressed) {\r\n      if (props.data.hasMine) {\r\n        return (\r\n          <div\r\n            className=\"bomb cell\"\r\n            onClick={() => props.click(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          ></div>\r\n        );\r\n      } else if (props.data.minesAround === 0) {\r\n        return (\r\n          <div\r\n            className=\"pressed cell\"\r\n            onClick={() => props.click(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"pressed cell\"\r\n            onClick={() => props.click(props.data)}\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n          >\r\n            {props.data.minesAround}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n      return (\r\n        <div\r\n          className=\"flagged cell\"\r\n          onClick={() => props.click(props.data)}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n        ></div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onClick={() => props.click(props.data)}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell\"\r\n\r\nconst GridRow = (props) => {\r\n  let cells = props.cells.map((data, index) => {\r\n    return <Cell key={index} data={data} click={props.click} flag={props.flag}/>;\r\n  });\r\n\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default GridRow;\r\n","import React, { Component } from \"react\";\r\nimport GridRow from \"../GridRow\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: this.createGrid(props),\r\n    };\r\n    this.isNew = false;\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (\r\n      this.props.openedCells > nextProps.openedCells ||\r\n      this.props.openedCells === 0\r\n    ) {\r\n      this.setState({\r\n        rows: this.createGrid(nextProps),\r\n      });\r\n    }\r\n  }\r\n\r\n  createGrid = (props) => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n\r\n          minesAround: 0,\r\n          hasMine: false,\r\n          isPressed: false,\r\n          hasFlag: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < props.mines; i++) {\r\n      let row = Math.floor(Math.random() * props.rows);\r\n      let col = Math.floor(Math.random() * props.columns);\r\n\r\n      let chosencell = grid[row][col];\r\n\r\n      if (chosencell.hasMine) {\r\n        i--;\r\n      } else {\r\n        chosencell.hasMine = true;\r\n      }\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  click = (cell) => {\r\n    if (this.props.game === \"ended\" || this.props.game === \"won\") {\r\n      return;\r\n    }\r\n\r\n    let neighbours = new Promise((resolve) => {\r\n      let bombs = this.countNeighbours(cell);\r\n\r\n      resolve(bombs);\r\n    });\r\n\r\n    neighbours.then((countNeighbours) => {\r\n      let rows = this.state.rows;\r\n      let currentCell = rows[cell.y][cell.x];\r\n\r\n      if (currentCell.hasMine && this.props.openedCells === 0) {\r\n        let newRows = this.createGrid(this.props);\r\n        this.setState(\r\n          {\r\n            rows: newRows,\r\n          },\r\n          () => {\r\n            this.click(cell);\r\n          }\r\n        );\r\n      } else {\r\n        if (!currentCell.isPressed && !cell.hasFlag) {\r\n          this.props.onCellInspect();\r\n          currentCell.isPressed = true;\r\n          currentCell.minesAround = countNeighbours;\r\n\r\n          this.setState({ rows });\r\n\r\n          if (!currentCell.hasMine && countNeighbours === 0) {\r\n            this.countEmptyCell(cell);\r\n          }\r\n\r\n          if (currentCell.hasMine && this.props.openedCells !== 0) {\r\n            this.props.finishGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  countNeighbours = (cell) => {\r\n    //Method based on the reference code, that was created in java\r\n    let total = 0;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          let rowOff = row + cell.y;\r\n          let colOff = col + cell.x;\r\n          if (\r\n            rowOff < this.state.rows.length &&\r\n            colOff < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              this.state.rows[rowOff][colOff].hasMine &&\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              total++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return total;\r\n  };\r\n\r\n  countEmptyCell = (cell) => {\r\n    //Spin through the neighbouring cells just as in the before method\r\n    let rows = this.state.rows;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          let rowOff = row + cell.y;\r\n          let colOff = col + cell.x;\r\n          if (\r\n            rowOff < this.state.rows.length &&\r\n            colOff < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              !rows[rowOff][colOff].hasMine &&\r\n              !rows[rowOff][colOff].isPressed\r\n            ) {\r\n              this.click(rows[rowOff][colOff]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  flag = (cell) => {\r\n    let rows = this.state.rows;\r\n    if (\r\n      this.props.game === \"ended\" ||\r\n      this.props.game === \"won\" ||\r\n      this.props.game !== \"running\"\r\n    ) {\r\n      return;\r\n    } else if (!cell.isPressed) {\r\n      cell.hasFlag = !cell.hasFlag;\r\n      this.setState({ rows });\r\n      this.props.changeFlagsNumber(cell.hasFlag ? -1 : 1);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Create rows\r\n    let rows = this.state.rows.map((row, index) => {\r\n      return (\r\n        <GridRow cells={row} key={index} click={this.click} flag={this.flag} />\r\n      );\r\n    });\r\n    return <div className=\"grid\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  let minutes = Math.floor(props.time / 60);\r\n  let seconds = props.time - minutes * 60 || 0;\r\n  let timeToSend = minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n\r\n  return (\r\n    <div className=\"grid-header\">\r\n      <div className=\"flags\">{props.flags}</div>\r\n      <button className=\"reset\" onClick={props.reset}>\r\n        RESET\r\n      </button>\r\n      <div className=\"timer\">{timeToSend}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"./Grid\";\r\nimport Header from \"./Header\";\r\n\r\nclass Game extends Component {\r\n  \r\n    state = {\r\n      openedCells: 0,\r\n      time: 0,\r\n      rows: this.props.rows,\r\n      columns: this.props.columns,\r\n      mines: this.props.mines,\r\n      flags: this.props.flags,\r\n      game: \"pending\",\r\n    };\r\n\r\n  \r\n\r\n  componentWillMount() {\r\n    this.intervals = [];\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.game === \"running\") {\r\n      this.winning();\r\n    }\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.openedCells > 0 && this.state.game === \"running\") {\r\n      let time = this.state.time + 1;\r\n      this.setState({ time });\r\n    }\r\n  };\r\n\r\n  setInterval = (fn, t) => {\r\n    this.intervals.push(setInterval(fn, t));\r\n  };\r\n\r\n  reset = () => {\r\n    this.newState = {\r\n      openedCells: 0,\r\n      time: 0,\r\n      rows: this.props.rows,\r\n      columns: this.props.columns,\r\n      mines: this.props.mines,\r\n      flags: this.props.flags,\r\n      game: \"pending\",\r\n    };\r\n\r\n    this.intervals.map(clearInterval);\r\n\r\n    this.setState({ ...this.newState }, () => {\r\n      this.intervals = [];\r\n    });\r\n  };\r\n\r\n  finishGame = () => {\r\n    this.setState({\r\n      game: \"ended\",\r\n    });\r\n  };\r\n\r\n  handleCellInspect = () => {\r\n    if (this.state.game !== \"running\" && this.state.openedCells === 0) {\r\n      this.setState(\r\n        {\r\n          game: \"running\",\r\n        },\r\n        () => {\r\n          this.setInterval(this.tick, 1000);\r\n        }\r\n      );\r\n    }\r\n\r\n    this.setState((previousState) => {\r\n      return { openedCells: previousState.openedCells + 1 };\r\n    });\r\n  };\r\n\r\n  changeFlagsNumber = (amount) => {\r\n    this.setState({ flags: this.state.flags + amount });\r\n  };\r\n\r\n  winning = () => {\r\n    if (\r\n      this.state.mines + this.state.openedCells >=\r\n      this.state.columns * this.state.rows\r\n    ) {\r\n      this.setState({\r\n        game: \"won\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"minesweeper\">\r\n        <Header\r\n          time={this.state.time}\r\n          flags={this.state.flags}\r\n          reset={this.reset}\r\n        />\r\n        <Grid\r\n          game={this.state.game}\r\n          openedCells={this.state.openedCells}\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          mines={this.state.mines}\r\n          changeFlagsNumber={this.changeFlagsNumber}\r\n          onCellInspect={this.handleCellInspect}\r\n          finishGame={this.finishGame}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport \"./index.css\";\r\n\r\nclass Dialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      radio: this.checkCategory(props),\r\n      customrows: props.rows,\r\n      customcolumns: props.columns,\r\n      custommines: props.mines,\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onCustomRowChange = this.onCustomRowChange.bind(this);\r\n    this.onCustomColumnChange = this.onCustomColumnChange.bind(this);\r\n    this.onCustomMinesChange = this.onCustomMinesChange.bind(this);\r\n  }\r\n\r\n  checkCategory = (props) => {\r\n    if (props.rows === 9 && props.columns === 9 && props.mines === 10) {\r\n      return \"beginner\";\r\n    } else if (props.rows === 16 && props.columns === 16 && props.mines === 40) {\r\n      return \"intermediate\";\r\n    } else if (props.rows === 16 && props.columns === 30 && props.mines === 99) {\r\n      return \"expert\";\r\n    }else{\r\n      return \"custom\"\r\n    }\r\n  };\r\n\r\n  onChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  onCustomRowChange(e) {\r\n    this.setState({\r\n      customrows: e.target.value,\r\n    });\r\n  }\r\n  onCustomColumnChange(e) {\r\n    this.setState({\r\n      customcolumns: e.target.value,\r\n    });\r\n  }\r\n  onCustomMinesChange(e) {\r\n    this.setState({\r\n      custommines: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let dialog = (\r\n      <div className=\"dialogStyles\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td id=\"tableTitle\">Game</td>\r\n              <td colSpan=\"3\">\r\n                <button className=\"closeButton\" onClick={this.props.onClose}>\r\n                  x\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td></td>\r\n              <td>Rows</td>\r\n              <td>Columns</td>\r\n              <td>Mines</td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"radio\"\r\n                  onChange={this.onChange}\r\n                  value=\"beginner\"\r\n                  name=\"radio\"\r\n                  checked={this.state.radio === \"beginner\"}\r\n                />{\" \"}\r\n                Beginner\r\n              </td>\r\n              <td>9</td>\r\n              <td>9</td>\r\n              <td>10</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"radio\"\r\n                  onChange={this.onChange}\r\n                  value=\"intermediate\"\r\n                  name=\"radio\"\r\n                  checked={this.state.radio === \"intermediate\"}\r\n                />{\" \"}\r\n                Intermediate\r\n              </td>\r\n              <td>16</td>\r\n              <td>16</td>\r\n              <td>40</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"radio\"\r\n                  onChange={this.onChange}\r\n                  value=\"expert\"\r\n                  name=\"radio\"\r\n                  checked={this.state.radio === \"expert\"}\r\n                />{\" \"}\r\n                Expert\r\n              </td>\r\n              <td>16</td>\r\n              <td>30</td>\r\n              <td>99</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"radio\"\r\n                  onChange={this.onChange}\r\n                  value=\"custom\"\r\n                  name=\"radio\"\r\n                  checked={this.state.radio === \"custom\"}\r\n                />{\" \"}\r\n                Custom\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={this.state.customrows}\r\n                  onChange={this.onCustomRowChange}\r\n                  className=\"custom\"\r\n                ></input>\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={this.state.customcolumns}\r\n                  onChange={this.onCustomColumnChange}\r\n                  className=\"custom\"\r\n                ></input>\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={this.state.custommines}\r\n                  onChange={this.onCustomMinesChange}\r\n                  className=\"custom\"\r\n                ></input>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <button id=\"newGame\" onClick={this.newGame}>\r\n          New Game\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n    if (!this.props.isOpen) {\r\n      dialog = null;\r\n    }\r\n    return <div>{dialog}</div>;\r\n  }\r\n\r\n  checkNumber = (num, min, max) => {\r\n    if (num > max) {\r\n      return max;\r\n    } else if (num < min) {\r\n      return min;\r\n    } else {\r\n      return num;\r\n    }\r\n  };\r\n\r\n  validateMine = (row, col, mine) => {\r\n    if (row * col > mine) {\r\n      return mine;\r\n    } else {\r\n      var num = Math.round(row * col * 0.8 * 10) / 10;\r\n      return num < 800 ? num : 800;\r\n    }\r\n  };\r\n\r\n  newGame = () => {\r\n    if (this.state.radio === \"beginner\") {\r\n      this.props.onNewGame(9, 9, 10);\r\n    } else if (this.state.radio === \"intermediate\") {\r\n      this.props.onNewGame(16, 16, 40);\r\n    } else if (this.state.radio === \"expert\") {\r\n      this.props.onNewGame(16, 30, 99);\r\n    } else if (this.state.radio === \"custom\") {\r\n      const crow = this.checkNumber(this.state.customrows, 2, 30);\r\n      const ccol = this.checkNumber(this.state.customcolumns, 6, 45);\r\n      const cmine = this.checkNumber(this.state.custommines, 3, 800);\r\n      const cmineValid = this.validateMine(crow, ccol, cmine);\r\n      this.setState({\r\n        customrows: crow,\r\n        customcolumns: ccol,\r\n        custommines: cmineValid,\r\n      });\r\n      this.props.onNewGame(crow, ccol, cmineValid);\r\n    }\r\n  };\r\n}\r\nexport default Dialog;\r\n","import React, { Component, createRef } from \"react\";\r\n\r\nimport Game from \"../../minesweeper/src/Game\";\r\nimport Dialog from \"./Dialog\";\r\nimport \"./index.css\";\r\n\r\nclass Minesweeper extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      isOpen: false,\r\n      //beginner\r\n      rows: 9,\r\n      columns: 9,\r\n      mines: 10,\r\n    };\r\n    this.game = createRef();\r\n  }\r\n\r\n  changeDialog = () => {\r\n    this.state.isOpen\r\n      ? this.setState({ isOpen: false })\r\n      : this.setState({ isOpen: true });\r\n  };\r\n\r\n  onNewGame = (recrows, reccolumns, recmines) => {\r\n    this.changeDialog();\r\n    this.setState(\r\n      {\r\n        rows: recrows,\r\n        columns: reccolumns,\r\n        mines: recmines,\r\n      },\r\n      () => {\r\n        this.game.current.reset();\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.changeDialog}>Game</button>\r\n\r\n        <Dialog\r\n          isOpen={this.state.isOpen}\r\n          onClose={(e) => this.setState({ isOpen: false })}\r\n          onNewGame={this.onNewGame}\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          mines={this.state.mines}\r\n        ></Dialog>\r\n\r\n        <Game\r\n          ref={this.game}\r\n          rows={this.state.rows}\r\n          columns={this.state.columns}\r\n          mines={this.state.mines}\r\n          flags={this.state.mines}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minesweeper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Minesweeper from \"./Minesweeper\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Minesweeper />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}