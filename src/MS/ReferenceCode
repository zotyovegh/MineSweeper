 Below code was created in java, for understanding the task. Something similar should be implemented 

 public Position[][] createBoard(int x, int y, int bombs) {
        Random random = new Random();

        boolean[][] booleanBoard = new boolean[x][y];
        for (int i = 0; i < bombs; i++) {
            int n = random.nextInt(x);
            int m = random.nextInt(y);
            booleanBoard[n][m] = true;
        }

        Position[][] bombBoard = new Position[x][y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                bombBoard[i][j] = new Position(false, countNeighbours(booleanBoard, i, j));
            }
        }
        return bombBoard;
    }


    public int countNeighbours(boolean[][] board, int posx, int posy) {
        if (board[posx][posy]) {
            return -1;
        }
        int total = 0;
        for (int xoff = -1; xoff <= 1; xoff++) {
            for (int yoff = -1; yoff <= 1; yoff++) {
                int i = xoff + posx;
                int j = yoff + posy;
                if (i > -1 && i < board.length && j > -1 && j < board[0].length) {
                    if (board[i][j]) {
                        total++;
                    }
                }
            }
        }
        return total;
    }